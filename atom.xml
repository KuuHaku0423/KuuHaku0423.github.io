<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>池^Blog</title>
  <icon>https://www.gravatar.com/avatar/17c16cbb206b950e35660900c6960bec</icon>
  <subtitle>大海星辰。</subtitle>
  <link href="http://kuuhaku0423.github.io/atom.xml" rel="self"/>
  
  <link href="http://kuuhaku0423.github.io/"/>
  <updated>2022-09-29T07:50:57.304Z</updated>
  <id>http://kuuhaku0423.github.io/</id>
  
  <author>
    <name>KuuHaku</name>
    <email>289789584@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker概述</title>
    <link href="http://kuuhaku0423.github.io/2022/09/22/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://kuuhaku0423.github.io/2022/09/22/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-22T12:33:33.000Z</published>
    <updated>2022-09-29T07:50:57.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker为什么出现"><a href="#Docker为什么出现" class="headerlink" title="Docker为什么出现?"></a><strong>Docker为什么出现?</strong></h1><p><font size="4"><br><div class="tip home"><p>本文章搬运B站狂神笔记内容，转载需注明出处。</p></div><br><div class="tag link"><a class="link-card" title="狂神说Docker" href="https://www.bilibili.com/video/BV1og4y1q7M4"><div class="left"><img src="/img/siteicon/64.png"/></div><div class="right"><p class="text">狂神说Docker</p><p class="url">https://www.bilibili.com/video/BV1og4y1q7M4</p></div></a></div></p><blockquote><p><strong>前言：</strong></p></blockquote><p> 一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员是极大的考验!</p><p>环境配置如此麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。解决开发人员说的“ 在我的机器上可正常工作”的问题。</p><p>之前在服务器配置一个应用的运行环境，要安装各种软件，就拿一个基本的工程项目的环境来说吧，<span class='p red'>Java/Tomcat/MySQL/JDBC</span>驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。</p><p>传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码文件等（Java为例）。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，<strong><span class='p red'>开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。</span></strong></p><blockquote><p>Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案。</p></blockquote><div class="tip fa-atom"><p>Docker镜像的设计，使得Docker得以打破过去「程序即应用」的观念。通过Docker镜像 ( images ) 将应用程序所需要的系统环境，由下而上打包，达到应用程序跨平台间的无缝接轨运作。</p></div><p><img src="/Users/kuuhaku/Library/Application Support/typora-user-images/image-20220922145711087.png" alt="image-20220922145711087"></p><p>Docker的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。</p><div class="tip info faa-horizontal animated"><p>Docker历史</p></div><p>2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker。Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。</p><div class="tip warning"><p>正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。</p></div><p>什么是<span class="bubble-content">“开源”？</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;"> 开源的意义：对于知识更高效率的重新利用。因为是开源软件，所以用户是自由的：他可以自由的使用、学习软件的内部架构，也可以修改、重新发布。</span></span>，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。</p><p>有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。自己养不活，就吃“百家饭”嘛。2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的<span class='p red'>Solomon Hykes</span>正式决定，将Docker项目开源。不开则已，一开惊人。越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。Docker的人气迅速攀升，速度之快，令人瞠目结舌。开源当月，Docker 0.1 版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0 版本正式发布。此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像<span class='p red'>Google、微软、Amazon、VMware</span>这样的巨头，都对它青睐有加，表示将全力支持。Docker和容器技术为什么会这么火爆？说白了，就是因为它“轻”。在容器技术之前，业界的网红是虚拟机。虚拟机技术的代表，是VMWare和OpenStack。</p><p>相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是相互隔离的，互不影响。虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于轻量级的虚拟化。虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙 箱”）。它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。</p><div class="tip info faa-horizontal animated"><p>Docker理念</p></div><p><strong><span class='p red'>Docker是基于Go语言实现的云开源项目。</span></strong></p><p>Docker的主要目标是“Build，Ship and Run Any App , Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。</p><p>Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</p><h1 id="Docker能干嘛"><a href="#Docker能干嘛" class="headerlink" title="Docker能干嘛"></a>Docker能干嘛</h1><div class="tip info faa-horizontal animated"><p>回顾以往虚拟机技术</p></div><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。</p><p>它可以在一种操作系统里面运行另一种操作系统，比如在Windows 系统里面运行Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://health-manager-1.oss-cn-guangzhou.aliyuncs.com/MyBlog/WorkImage/iShot_2022-09-22_14.56.38.png"/></div></div><p>虚拟机的缺点：</p><ol><li>资源占用多</li><li>冗余步骤多</li><li>启动慢</li></ol><div class="tip info faa-horizontal animated"><p>容器虚拟化技术</p></div><p>由于前面虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://health-manager-1.oss-cn-guangzhou.aliyuncs.com/MyBlog/WorkImage/iShot_2022-09-22_16.45.43.png" style="height:400px;"/></div></div><p>比较了 Docker 和传统虚拟化方式的不同之处：</p><ul><li><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</p></li><li><p>而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟，因此容器要比传统虚拟机更为轻便。</p></li><li><p>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</p></li></ul><div class="tip info faa-horizontal animated"><p>开发/运维（DevOps）</p></div><p><strong>更快速的应用交付和部署：</strong></p><p>传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。</p><p><strong>更便捷的升级和扩缩容：</strong></p><p>随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。</p><p><strong>更简单的系统运维：</strong></p><p>应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。</p><p><strong>更高效的计算资源利用：</strong></p><p>Docker是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的Hypervisor [管理程序] 支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。</p><h1 id="Docker官网（学习途径）"><a href="#Docker官网（学习途径）" class="headerlink" title="Docker官网（学习途径）"></a>Docker官网（学习途径）</h1><p>Docker官网：<a href="http://www.docker.com">http://www.docker.com</a></p><p>Docker中文网站：<a href="https://www.docker-cn.com">https://www.docker-cn.com</a></p><p>Docker Hub官网：<a href="https://hub.docker.com">https://hub.docker.com</a> （Docker仓库）</p>]]></content>
    
    
    <summary type="html">docker概述笔记</summary>
    
    
    
    <category term="Docker" scheme="http://kuuhaku0423.github.io/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>关于程序异常处理</title>
    <link href="http://kuuhaku0423.github.io/2022/09/21/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E5%89%AF%E6%9C%AC/"/>
    <id>http://kuuhaku0423.github.io/2022/09/21/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9A%84%E5%89%AF%E6%9C%AC/</id>
    <published>2022-09-21T12:11:00.000Z</published>
    <updated>2022-09-29T07:50:57.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="放射科执行基数药异常"><a href="#放射科执行基数药异常" class="headerlink" title="放射科执行基数药异常"></a>放射科执行基数药异常</h2><p>核实是否生成执行记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> OE_OrdExec a <span class="keyword">WHERE</span></span><br><span class="line">a.OEORE OEORI ParRef<span class="operator">=</span> <span class="string">&#x27;58752369||39</span></span><br></pre></td></tr></table></figure><p>没有则生成执行记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GenExe^DHCOEOrdExec(rowid,SttDate)</span><br></pre></td></tr></table></figure><p>Rowed:医嘱字表id</p><p>SttDate：如果是临时医嘱或者取药医嘱，取医嘱开立时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行例子：</span></span><br><span class="line">d  GenExe^DHCOEOrdExec(&quot;581969021||1224&quot;.$zdh(&quot;2022-07-27&quot;3))</span><br></pre></td></tr></table></figure><p>注意：生成了执行记录不会重复生成</p><h2 id="卒中系统推送患者就诊信息"><a href="#卒中系统推送患者就诊信息" class="headerlink" title="卒中系统推送患者就诊信息"></a>卒中系统推送患者就诊信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">入参就诊号：</span></span><br><span class="line">w ##class(web.ZSSY.ApoplexyInterface).realReceiveRegister(&quot;50628013&quot;)</span><br></pre></td></tr></table></figure><h2 id="重推检查申请单"><a href="#重推检查申请单" class="headerlink" title="重推检查申请单"></a>重推检查申请单</h2><blockquote><p>1.重推检查申请单（门诊走的是医嘱计费状态接口，住院走的是检查申请单信息(住院)接口）：</p></blockquote><p>1.1住院推送检查申请单（OeoriList用“^”分割医嘱）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w ##class(web.DHCENS.EnsHISService).DHCHisInterface(&quot;SENDRISAPPBILLINFO&quot;,OeoriList)</span><br></pre></td></tr></table></figure><p>1.2门诊推送检查申请单（OeoriList用“^”分割医嘱）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w ##class(web.DHCENS.EnsHISService).DHCHisInterface(&quot;SENDOPCHARGEINFO&quot;,OeoriList)</span><br></pre></td></tr></table></figure><h2 id="重推检验医嘱"><a href="#重推检验医嘱" class="headerlink" title="重推检验医嘱"></a>重推检验医嘱</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w ##class(web.DHCENS.EnsHISService).DHCHisInterface(&quot;SENDDOCORDITEMINFO&quot;,&quot;59664231||4&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;放射科执行基数药异常&quot;&gt;&lt;a href=&quot;#放射科执行基数药异常&quot; class=&quot;headerlink&quot; title=&quot;放射科执行基数药异常&quot;&gt;&lt;/a&gt;放射科执行基数药异常&lt;/h2&gt;&lt;p&gt;核实是否生成执行记录：&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="Woker" scheme="http://kuuhaku0423.github.io/categories/Woker/"/>
    
    
  </entry>
  
  <entry>
    <title>程序更新日记 2022-09</title>
    <link href="http://kuuhaku0423.github.io/2022/09/21/%E7%A8%8B%E5%BA%8F%E6%9B%B4%E6%96%B0%E6%97%A5%E8%AE%B0-2022-09/"/>
    <id>http://kuuhaku0423.github.io/2022/09/21/%E7%A8%8B%E5%BA%8F%E6%9B%B4%E6%96%B0%E6%97%A5%E8%AE%B0-2022-09/</id>
    <published>2022-09-21T12:11:00.000Z</published>
    <updated>2022-09-29T07:50:57.304Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、出院处方打印问题"><a href="#1、出院处方打印问题" class="headerlink" title="1、出院处方打印问题"></a>1、出院处方打印问题</h4><blockquote><p>出院处方打印时当患者信息表里身份证信息为空时会无法打印</p></blockquote><ol><li>解决方案：当患者信息表里的身份证信息为空时，会传进来新的身份证号，去到表里进行Update</li><li>方法类：web.DHCDocCheckPoison</li><li>方法：UpdateAgencyInfo</li><li>更新时间：<strong>2022-09-21</strong> </li></ol><h4 id="2、诊查费收取问题"><a href="#2、诊查费收取问题" class="headerlink" title="2、诊查费收取问题"></a>2、诊查费收取问题</h4><blockquote><p>目前统一是经过判断弹窗医生自己选择是否收取诊查费</p></blockquote><ol><li>解决方案：根据需求门诊统一收取诊查费，急诊维持不变</li><li>方法类：web.DHCOPAdmReg</li><li>方法：新增方法 GetDepName   入参：科室ID</li><li>JS：scripts/OPDoc.RapidRegist.hui.js   </li><li>更新时间：2022-09-22</li></ol><h4 id="2、打印检验条码问题"><a href="#2、打印检验条码问题" class="headerlink" title="2、打印检验条码问题"></a>2、打印检验条码问题</h4><blockquote><p>当检验条吗为空时依旧能够打印</p></blockquote><ol><li>解决方案：获取检验条吗输入框，当为空时return</li><li>JS: scripts/dhcnewpro/dhcem/print.exec.hisui.js</li><li>方法函数：function PrintBarNew()</li><li>更新时间：2022-09-22</li></ol><h4 id="3、住院证未代入入院医生信息"><a href="#3、住院证未代入入院医生信息" class="headerlink" title="3、住院证未代入入院医生信息"></a>3、住院证未代入入院医生信息</h4><ol><li>解决方案：当就诊表入院医生为空时取住院证表医生信息</li><li>方法类：web.DHCIPBillReg</li><li>方法：GetAdmInfo</li><li>更新时间：2022-09-29</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、出院处方打印问题&quot;&gt;&lt;a href=&quot;#1、出院处方打印问题&quot; class=&quot;headerlink&quot; title=&quot;1、出院处方打印问题&quot;&gt;&lt;/a&gt;1、出院处方打印问题&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;出院处方打印时当患者信息表里身份证信息为空时会无法</summary>
      
    
    
    
    <category term="Woker" scheme="http://kuuhaku0423.github.io/categories/Woker/"/>
    
    
  </entry>
  
</feed>
